generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model user {
  id            String         @id
  email         String         @unique
  name          String
  createdAt     DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime       @default(now()) @db.Timestamptz(6)
  doctor        doctor?
  patient       patient?
  user_metadata user_metadata?
  user_vpa      user_vpa?
}

model user_vpa {
  id        String   @id
  vpa       String   @unique
  userId    String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, vpa])
}

model doctor {
  id                           String                         @id @default(dbgenerated("gen_random_uuid()"))
  userId                       String                         @unique
  metadata                     Json?
  createdAt                    DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt                    DateTime                       @default(now()) @db.Timestamptz(6)
  backend_pat_doc_verification backend_pat_doc_verification[]
  user                         user                           @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctor_hospital              doctor_hospital[]
  doctor_visits                doctor_visits[]
}

model doctor_visits {
  doctorId  String
  visitId   String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  doctor    doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  visits    visits   @relation(fields: [visitId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([visitId, doctorId])
}

model medical_case {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()"))
  data                  String?
  createdAt             DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                @default(now()) @db.Timestamptz(6)
  patientId             String
  diagnoses             diagnoses[]
  lab_report            lab_report[]
  patient               patient                 @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  medical_case_hospital medical_case_hospital[]
  visits                visits[]
}

model medical_center {
  id        String   @id(map: "hospital_pkey")
  name      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  type      String?
  pinCode   String?
  city      String?
  state     String?
}

model patient {
  id                           String                         @id @default(dbgenerated("gen_random_uuid()"))
  userId                       String                         @unique
  metadata                     Json?
  createdAt                    DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt                    DateTime                       @default(now()) @db.Timestamptz(6)
  backend_pat_doc_verification backend_pat_doc_verification[]
  medical_case                 medical_case[]
  user                         user                           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model visits {
  id                 String               @id @default(dbgenerated("gen_random_uuid()"))
  metadata           Json?
  medicalCaseId      String
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @default(now()) @db.Timestamptz(6)
  diagnoses_visits   diagnoses_visits[]
  doctor_visits      doctor_visits[]
  lab_reports_visits lab_reports_visits[]
  medical_case       medical_case         @relation(fields: [medicalCaseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model backend_pat_doc_verification {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  patientId String
  doctorId  String
  otp       Decimal  @db.Decimal
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  status    String?
  doctor    doctor   @relation(fields: [doctorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient   patient  @relation(fields: [patientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model backend_escrow {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  key       String   @unique
  secretKey String?  @unique
  metadata  Json?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  secretVI  String   @unique
}

model diagnoses {
  id               String             @id @default(dbgenerated("gen_random_uuid()"))
  medicalCaseId    String
  diagnoses        String?
  diagnoseAt       DateTime?          @db.Timestamptz(6)
  createdAt        DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime           @default(now()) @db.Timestamptz(6)
  medical_case     medical_case       @relation(fields: [medicalCaseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  diagnoses_visits diagnoses_visits[]
}

model diagnoses_visits {
  visitId     String
  diagnosesId String
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  diagnoses   diagnoses @relation(fields: [diagnosesId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  visits      visits    @relation(fields: [visitId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([visitId, diagnosesId])
}

model lab_report {
  id                 String               @id @default(dbgenerated("gen_random_uuid()"))
  data               String
  medicalCaseId      String
  createdAt          DateTime             @default(now()) @db.Timestamp(6)
  updatedAt          DateTime             @default(now()) @db.Timestamp(6)
  medical_case       medical_case         @relation(fields: [medicalCaseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lab_reports_visits lab_reports_visits[]
}

model lab_reports_visits {
  labReportId String
  visitsId    String
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime   @default(now()) @db.Timestamptz(6)
  lab_report  lab_report @relation(fields: [labReportId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  visits      visits     @relation(fields: [visitsId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([labReportId, visitsId])
}

model user_metadata {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  userId      String    @unique
  phoneNumber String?   @unique
  dateOfBirth DateTime? @db.Date
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6)
  address     String?
  user        user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model doctor_hospital {
  doctorId   String
  hospitalId String
  position   String
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @db.Timestamptz(6)
  doctor     doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  hospital   hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([doctorId, hospitalId])
}

model hospital {
  id                    String                  @id(map: "hospital_pkey1") @default(dbgenerated("gen_random_uuid()"))
  name                  String
  latitude              String
  longitude             String
  address               String
  pinCode               String
  state                 String
  city                  String
  createdAt             DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime                @default(now()) @db.Timestamptz(6)
  doctor_hospital       doctor_hospital[]
  medical_case_hospital medical_case_hospital[]
}

model medical_case_hospital {
  medicalCaseId String
  hospitalId    String
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime     @default(now()) @db.Timestamptz(6)
  hospital      hospital     @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  medical_case  medical_case @relation(fields: [medicalCaseId], references: [id], onDelete: Cascade)

  @@id([medicalCaseId, hospitalId])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model medication {
  id        Int?
  name      Int?
  desc      Int?
  metadata  Int?
  patientId Int?

  @@ignore
}

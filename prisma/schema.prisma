generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model user {
  id        String    @id
  email     String    @unique
  name      String
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  doctor    doctor?
  patient   patient?
  user_vpa  user_vpa?
}

model user_vpa {
  id        String   @id
  vpa       String   @unique
  userId    String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, vpa])
}

model doctor {
  id                           String                         @id @default(dbgenerated("gen_random_uuid()"))
  userId                       String                         @unique
  metadata                     Json?
  createdAt                    DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt                    DateTime                       @default(now()) @db.Timestamptz(6)
  backend_pat_doc_verification backend_pat_doc_verification[]
  user                         user                           @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctor_visits                doctor_visits[]
}

model doctor_visits {
  id        String   @id
  doctorId  String
  patientId String
  visitId   String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  doctor    doctor   @relation(fields: [doctorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient   patient  @relation(fields: [patientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  visits    visits   @relation(fields: [visitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model medical_case {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  patientId String
  data      String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  patient   patient  @relation(fields: [patientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  visits    visits[]
}

model medical_center {
  id        String   @id(map: "hospital_pkey")
  name      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  type      String?
  pinCode   String?
  city      String?
  state     String?
}

model patient {
  id                           String                         @id @default(dbgenerated("gen_random_uuid()"))
  userId                       String                         @unique
  metadata                     Json?
  createdAt                    DateTime                       @default(now()) @db.Timestamptz(6)
  updatedAt                    DateTime                       @default(now()) @db.Timestamptz(6)
  backend_pat_doc_verification backend_pat_doc_verification[]
  doctor_visits                doctor_visits[]
  medical_case                 medical_case[]
  user                         user                           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model visits {
  id            String          @id
  metadata      Json?
  medicalCaseId String
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime        @default(now()) @db.Timestamptz(6)
  doctor_visits doctor_visits[]
  medical_case  medical_case    @relation(fields: [medicalCaseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model backend_pat_doc_verification {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  patientId String
  doctorId  String
  otp       Decimal  @db.Decimal
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  status    String?
  doctor    doctor   @relation(fields: [doctorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient   patient  @relation(fields: [patientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
